Problem statement
Given a singly linked list of integers, reverse it using recursion and return the head to the modified list. You have to do this in O(N) time complexity where N is the size of the linked list.

 Note :
No need to print the list, it has already been taken care. Only return the new head to the list.


public class Solution {

    public static Node<Integer> reverseRec(Node<Integer> head) {
        // Base case: empty list or single-node list
        if (head == null || head.next == null) {
            return head;
        }

        Node<Integer> reversedTail = head.next;
        Node<Integer> reversedHead = reverseRec(head.next);

        reversedTail.next = head;
        head.next = null;

        return reversedHead;
    }
}
