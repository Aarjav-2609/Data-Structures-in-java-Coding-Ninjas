Problem statement
You have been given a singly linked list of integers along with two integers, 'M,' and 'N.' Traverse the linked list such that you retain the 'M' nodes, then delete the next 'N' nodes. Continue the same until the end of the linked list. Indexing starts from 1.

To put it in other words, in the given linked list, you need to delete N nodes after every M nodes.

Note :
No need to print the list, it has already been taken care. Only return the new head to the list. You can return null in case where all nodes will be deleted.


public class Solution {

    public static Node<Integer> skipMdeleteN(Node<Integer> head, int M, int N) {
        if (head == null || M < 0 || N <= 0) {
            // Invalid input, return the original list
            return head;
        }

        Node<Integer> current = head;
        Node<Integer> previous = null;

        while (current != null) {
            // Skip M nodes
            for (int i = 0; i < M && current != null; i++) {
                previous = current;
                current = current.next;
            }

            // Delete N nodes
            for (int i = 0; i < N && current != null; i++) {
                current = current.next;
            }

            // Connect the previous node to the current node after skipping and deleting nodes
            if (previous != null) {
                previous.next = current;
            } else {
                // If previous is null, update the head of the list
                head = current;
            }
        }

        return head;
    }
}
