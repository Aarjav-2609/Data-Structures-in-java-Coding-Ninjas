Problem statement
You have been given two sorted(in ascending order) singly linked lists of integers.

Write a function to merge them in such a way that the resulting singly linked list is also sorted(in ascending order) and return the new head to the list.

Note :
Try solving this in O(1) auxiliary space.

No need to print the list, it has already been taken care.


public class Solution {
    
    public static Node<Integer> mergeTwoSorteds(Node<Integer> head1, Node<Integer> head2) {
        if (head1 == null) {
            return head2;
        }
        if (head2 == null) {
            return head1;
        }

        Node<Integer> mergedHead = null;
        Node<Integer> mergedTail = null;

        // Initialize mergedHead and mergedTail
        if (head1.data <= head2.data) {
            mergedHead = head1;
            mergedTail = head1;
            head1 = head1.next;
        } else {
            mergedHead = head2;
            mergedTail = head2;
            head2 = head2.next;
        }

        // Merge the two sorted lists
        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                mergedTail.next = head1;
                mergedTail = head1;
                head1 = head1.next;
            } else {
                mergedTail.next = head2;
                mergedTail = head2;
                head2 = head2.next;
            }
        }

        // If one list is longer than the other
        if (head1 != null) {
            mergedTail.next = head1;
        }
        if (head2 != null) {
            mergedTail.next = head2;
        }

        return mergedHead;
    }
}
