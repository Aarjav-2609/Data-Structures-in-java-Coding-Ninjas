Problem statement
For a given singly linked list of integers, arrange the nodes such that all the even number nodes are placed after the all odd number nodes. The relative order of the odd and even terms should remain unchanged.

Note :
1. No need to print the linked list, it has already been taken care. Only return the new head to the list.
2. Don't create a new linked list.
3.  Just change the data, instead rearrange the provided list.



public class Solution {

    public static Node<Integer> evenAfterOdd(Node<Integer> head) {
        if (head == null || head.next == null) {
            // If the list is empty or has only one element, no rearrangement needed
            return head;
        }

        Node<Integer> oddHead = null;
        Node<Integer> oddTail = null;
        Node<Integer> evenHead = null;
        Node<Integer> evenTail = null;

        while (head != null) {
            if (head.data % 2 != 0) {
                // Current node has odd data
                if (oddHead == null) {
                    // If odd list is empty, initialize it
                    oddHead = head;
                    oddTail = head;
                } else {
                    // Append the current node to the odd list
                    oddTail.next = head;
                    oddTail = head;
                }
            } else {
                // Current node has even data
                if (evenHead == null) {
                    // If even list is empty, initialize it
                    evenHead = head;
                    evenTail = head;
                } else {
                    // Append the current node to the even list
                    evenTail.next = head;
                    evenTail = head;
                }
            }

            // Move to the next node in the original list
            head = head.next;
        }

        // If odd list is not empty, connect it to the even list
        if (oddHead != null) {
            oddTail.next = evenHead;
        }

        // If even list is not empty, update the tail to point to null
        if (evenTail != null) {
            evenTail.next = null;
        }

        // Return the head of the rearranged list
        return (oddHead != null) ? oddHead : evenHead;
    }
}
