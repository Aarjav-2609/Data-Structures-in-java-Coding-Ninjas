Problem statement
Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list.

 'k' is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of 'k,' then left-out nodes, in the end, should be reversed as well.


public class Solution {

    public static Node<Integer> kReverse(Node<Integer> head, int k) {
        if (head == null || k <= 1) {
            // Invalid input or no need to reverse, return the original list
            return head;
        }

        Node<Integer> current = head;
        Node<Integer> next = null;
        Node<Integer> prev = null;
        int count = 0;

        // Count the number of nodes in the current k-group
        Node<Integer> temp = head;
        while (temp != null && count < k) {
            temp = temp.next;
            count++;
        }

        // Reverse the current k-group
        count = 0;
        while (count < k && current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }

        // Recursively reverse the remaining list (including the last part)
        if (next != null) {
            head.next = kReverse(next, k);
        }

        // 'prev' is the new head of the reversed list
        return prev;
    }
}
