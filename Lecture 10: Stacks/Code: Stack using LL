Problem statement
Implement a Stack Data Structure specifically to store integer data using a Singly Linked List.

The data members should be private.

You need to implement the following public functions :

1. Constructor:
It initialises the data members as required.

2. push(data) :
This function should take one argument of type integer. It pushes the element into the stack and returns nothing.

3. pop() :
It pops the element from the top of the stack and in turn, returns the element being popped or deleted. In case the stack is empty, it returns -1.

4. top :
It returns the element being kept at the top of the stack. In case the stack is empty, it returns -1.

5. size() :
It returns the size of the stack at any given instance of time.

6. isEmpty() :
It returns a boolean value indicating whether the stack is empty or not.

Operations Performed on the Stack:
Query-1(Denoted by an integer 1): Pushes an integer data to the stack.

Query-2(Denoted by an integer 2): Pops the data kept at the top of the stack and returns it to the caller.

Query-3(Denoted by an integer 3): Fetches and returns the data being kept at the top of the stack but doesn't remove it, unlike the pop function.

Query-4(Denoted by an integer 4): Returns the current size of the stack.

Query-5(Denoted by an integer 5): Returns a boolean value denoting whether the stack is empty or not.






public class Stack {

    // Define the data members
    private Node top;
    private int size;

    public Stack() {
        // Initialize the data members
        this.top = null;
        this.size = 0;
    }

    /*----------------- Public Functions of Stack -----------------*/

    public int getSize() {
        // Return the size of the stack
        return size;
    }

    public boolean isEmpty() {
        // Check if the stack is empty
        return size == 0;
    }

    public void push(int element) {
        // Create a new node with the given data
        Node newNode = new Node(element);

        // Set the next of the new node to the current top
        newNode.next = top;

        // Update the top to the new node
        top = newNode;

        // Increment the size of the stack
        size++;
    }

    public int pop() {
        // Check if the stack is empty
        if (isEmpty()) {
            return -1;
        }

        // Retrieve the data from the top node
        int data = top.data;

        // Move the top to the next node
        top = top.next;

        // Decrement the size of the stack
        size--;

        // Return the popped data
        return data;
    }

    public int top() {
        // Check if the stack is empty
        if (isEmpty()) {
            return -1;
        }

        // Return the data from the top node
        return top.data;
    }
}
