Problem statement
You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.

Hint:
Identify how many pointers you require and try traversing them to right places and connect nodes accordingly also don't forget to disconnect what's required else it could create cycles.


public class Solution {

	public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
		if (head == null || n <= 0) {
            return head;
        }

        Node<Integer> slow = head;
        Node<Integer> fast = head;
        Node<Integer> prev = null;

        // Move 'fast' pointer n nodes ahead
        for (int i = 0; i < n; i++) {
            if (fast == null) {
                return head; // Not enough nodes in the list
            }
            prev = fast;
            fast = fast.next;
        }

        // Move 'slow' and 'fast' pointers until 'fast' reaches the end
        while (fast != null) {
            prev = slow;
            slow = slow.next;
            fast = fast.next;
        }

        // Update the connections to append the last 'N' nodes to the front
        prev.next = null; // Disconnect the remaining nodes
        prev = head; // Save the head of the original list
        head = slow; // Update the head to the new start
        while (slow.next != null) {
            slow = slow.next;
        }
        slow.next = prev; // Connect the last 'N' nodes to the original list

        return head;
	}

}
